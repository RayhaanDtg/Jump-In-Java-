package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import jumpin.common.JumpinConstants;
import jumpin.common.Position;

/**
 * This sets up the view of the game with the physical board and element images.
 * This is the view portion of the MVC model, and this has all the components
 * for the buttons and graphics associated with the game.
 */

public class JumpInView extends javax.swing.JFrame {

	private static final long serialVersionUID = -5885916620829790126L; // Auto Generated by eclipse

	public JButton[][] buttons; // A Button Array that retains the Buttons
	private JButton undoButton, redoButton, showSolutionButton; // Menu Buttons

	// Buttons (JumpIn Grid)
	private JPanel panel;

	// Setting the elements images
	ImageIcon iconHole = new ImageIcon("images/Hole.png");
	ImageIcon iconFoxHead = new ImageIcon("images/FoxHead.png");
	ImageIcon iconFoxTail = new ImageIcon("images/FoxButt.png");
	ImageIcon iconFoxHead_H = new ImageIcon("images/FoxHead_H.png");
	ImageIcon iconFoxTail_H = new ImageIcon("images/FoxButt_H.png");
	ImageIcon iconMushroom = new ImageIcon("images/mushroom.png");
	ImageIcon iconBunny = new ImageIcon("images/BunnyWhite.png");
	ImageIcon iconHill = new ImageIcon("images/HILL.png");
	ImageIcon bunnyOnHill = new ImageIcon("images/BunnyHill.png");
	ImageIcon bunnyInHole = new ImageIcon("images/BunnyHole.png");




	/**
	 * This Constructor, constructs the view of the game.
	 */
	public JumpInView() {
		// Sets the main layout as a BorderLayout
		setLayout(new BorderLayout());
		
        panel = new JPanel(new GridLayout(JumpinConstants.BOARD_HEIGHT, JumpinConstants.BOARD_WIDTH));
        // Adding the background to the frame
        panel.setBackground(Color.green);

        // Adding menu buttons
        JPanel menuPanel = new JPanel();
        undoButton = new JButton("Undo");
        redoButton = new JButton("Redo");
        showSolutionButton = new JButton("ShowSolution");
        undoButton.setEnabled(false);
        redoButton.setEnabled(false);
        showSolutionButton.setEnabled(true);

        menuPanel.add(undoButton);
        menuPanel.add(redoButton);
        menuPanel.add(showSolutionButton);
        add(menuPanel, BorderLayout.PAGE_START);
        
        // Buttons For Main Board Game
        buttons = new JButton[JumpinConstants.BOARD_HEIGHT][JumpinConstants.BOARD_WIDTH];
        // Adding the buttons in the 2-D Array
        for (int i = 0; i < JumpinConstants.BOARD_HEIGHT; i++) {
            for (int j = 0; j < JumpinConstants.BOARD_WIDTH; j++) {
                buttons[i][j] = new JButton();
                buttons[i][j].setOpaque(false);
                buttons[i][j].setContentAreaFilled(false);
                buttons[i][j].setBorderPainted(true);
                panel.add(buttons[i][j]);
            }
        }
        add(panel, BorderLayout.CENTER);
        
        // Setting the minimum size of the main frame
        setMinimumSize(new Dimension(665, 710));
        setLocation(500, 0);
        setResizable(false);
        // Allows the user to resize the Frame by minimizing and maximizing.
        setResizable(false);
        // Allows the user to exit out of the frame.
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        // Packs Everything in to the GUI.
        pack();
        // Sets the title name to JumIn
        setTitle("JumpIn");
        // Allows the GUI to be visible.
        setVisible(true);

    }

	/**
	 * Sets the element and board graphics for the buttons.
	 * 
	 * @param button
	 * @param str
	 */

	public void setButtonImage(JButton button, String str) {
		if (str == null) {
			button.setIcon(null);
		} 
		else {
			if (str.trim().equals("^")) {
				button.setIcon(iconHill);
			} else if (str.trim().equals("O")) {
				button.setIcon(iconHole);
			} else if (str.trim().indexOf("FTV") >= 0) {
				button.setIcon(iconFoxTail);
			} else if (str.trim().indexOf("FHV") >= 0) {
				button.setIcon(iconFoxHead);
			} else if (str.trim().indexOf("FTH") >= 0) {
				button.setIcon(iconFoxTail_H);
			} else if (str.trim().indexOf("FHH") >= 0) {
				button.setIcon(iconFoxHead_H);
			} else if (str.trim().indexOf("M") >= 0) {
				button.setIcon(iconMushroom);
			} else if (str.trim().indexOf("B") >= 0) {
				try {
					if (button.getIcon().equals(iconHill)) {
						button.setIcon(bunnyOnHill);
					}
					else if (button.getIcon().equals(iconHole)) {
						button.setIcon(bunnyInHole);
					}
				}
				catch(NullPointerException e) {
					button.setIcon(iconBunny);
				}
			}
		}

	}
	
	/**
	 * 
	 * 
	 * @param positions
	 */
	public void hilightHints(List<Position> positions) {
		for(Position p : positions) {
			buttons[p.getRow()][p.getColumn()].setOpaque(true);
			buttons[p.getRow()][p.getColumn()].setBackground(Color.LIGHT_GRAY);
		}
	}
	
	public void unhilightHints() {
		for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                buttons[i][j].setOpaque(false);
            }
        }
	}


	/**
	 * This gets the undoButton.
	 * 
	 * @return undoButton
	 */
	public JButton getUndoButton() {
		return undoButton;
	}

	/**
	 * This method gets the redoButton.
	 * 
	 * @return redoButton
	 */
	public JButton getRedoButton() {
		return redoButton;
	}

	/**
	 * This method gets the solution button.
	 * 
	 * @return showSolutionButton
	 */
	public JButton getShowSolutionButton() {
		return showSolutionButton;
	}

	/**
	 * Returns the button associated to the element position given.
	 *
	 * @param i row
	 * @param j column
	 * @return Button associated to the element position on the board
	 */
	public JButton getElementButton(final int i, final int j) {
		return buttons[i][j];
	}
}